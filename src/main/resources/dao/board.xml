<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<!-- namespace에는 Dao의 패키지명 포함한 인터페이스명과 동일하게 선언해야 mybatis-spring이 Dao에 대한 
	구현체를 자동으로 생성한다. -->
<mapper namespace="com.ssafy.tripoline.board.model.dao.BoardDao">    <!-- <== 페키지명만 쓰고 인터페이스명을 안쓰면 오류!!!! 자주하는 실수중 하나임 -->
	<!-- 사용가능한 태그명 <insert> <delete> <select> <update> executeUpdate 되는건 동일하지만 
		구분을 위해서 사용 -->
	<!-- parameter타입으로는 1개만 올 수 있음, 여러개를 사용하고싶다면 Dto를 만들거나 Map을 사용해야함 데이터가 1개일때는 
		바로써도 되지만 일반적으로 매핑시 #{속성명} 사용 -->

	<resultMap type="Article" id="ArticleDto">
		<id column="article_id" property="articleId" />
		<result column="article_title" property="articleTitle" />
		<result column="article_content" property="articleContent" />
		<result column="member_id" property="memberId" />
		<result column="member_name" property="memberName" />
		<result column="like_count" property="likeCount" />
		<result column="view_count" property="viewCount" />
		<result column="register_time" property="registerTime" />
		<result column="update_time" property="updateTime" />
		<result column="category_id" property="categoryId" />
		<result column="image" property="image" />
	</resultMap>

	<!-- <resultMap type="Article" id="viewArticle" extends="article"> <collection 
		property="fileInfos" column="article_id" javaType="list" ofType="fileInfoDto" 
		select="fileInfoList"/> </resultMap> -->



	<insert id="write" parameterType="Article">
		insert into articles
		(article_title, article_content, member_id,
		member_name,
		like_count, hit_count, register_time, update_time,
		category_id, image)
		values (#{articleTitle}, #{articleContent}, #{memberId},
		#{memberName}, 0, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
		#{categoryId}, #{image})
	</insert>
	
	<sql id="searchCon">
	  	<if test="word !=null and word !='' ">
	  		<choose>
	  			<when test=" key == 'article_id' ">
	  				article_id = #{word}
	  			</when>
	  			<when test=" key == 'article_title' ">
	  				article_title like  concat('%',#{word},'%')
	  			</when>
	  			<when test=" key == 'member_id' ">
	  				member_id like  concat('%',#{word},'%')
	  			</when>
	  		</choose>
	  	</if>
	  </sql>
	  
	  

	<select id="searchAll" parameterType="PageBean"
		resultMap="ArticleDto">
		select category_id, article_id, article_title, member_name, hit_count,
		like_count, register_time, update_time, image
		from articles
		<where>
			<include refid="searchCon"></include>
		</where>
		order by article_id desc
		limit #{start}, #{interval}
	</select>


	<select id="totalCount" parameterType="PageBean"
		resultType="int">
		select count(article_id)
		from articles
		<where>
			<include refid="searchCon"></include>
		</where>
	</select>


	<select id="getArticle" parameterType="int" resultMap="ArticleDto">
		select *
		from articles
		where article_id = #{articleId}
	</select>



	<select id="BestTotalCount" parameterType="PageBean"
		resultType="int">
		select count(article_id)
		from articles
	    where hit_count >= 1 or like_count >= 1
		<where>
			<include refid="searchCon"></include>
		</where>
	</select>

	<select id="getBestAll" parameterType="PageBean"
		resultMap="ArticleDto">
		select *
		from articles
		where hit_count >= 1 or like_count >= 1
		<where>
			<include refid="searchCon"></include>
		</where>
		order by article_id desc
	</select>



	<select id="categoryCount" parameterType="java.util.Map"
		resultType="int">
		select count(article_id)
		from articles
		where category_id=#{categoryId}
		<where>
			<include refid="searchCon"></include>
		</where>
	</select>

	<select id="searchByCategory" parameterType="java.util.Map"
		resultMap="ArticleDto">
		select *
		from articles
		where category_id=#{categoryId}
		<where>
		<include refid="searchCon"></include>
		</where>
		order
		by article_id
		limit #{start}, #{interval}
	</select>









	<update id="update" parameterType="Article">
		update articles set
		article_title=#{articleTitle}, article_content=#{articleContent},
		member_name=#{memberName}, update_time=CURRENT_TIMESTAMP,
		category_id=#{categoryId}, image = #{image}
		where article_id =
		#{articleId}
	</update>



	<update id="updateHit" parameterType="int">
		update articles set hit_count =
		hit_count+1
		where article_id = #{articleId}
	</update>

	<update id="updatelike" parameterType="int">
		update articles set like_count =
		like_count+1
		where article_id = #{articleId}
	</update>

	<delete id="remove" parameterType="int">
		delete from articles
		where
		article_id = #{articleId}
	</delete>

</mapper>    
    
    